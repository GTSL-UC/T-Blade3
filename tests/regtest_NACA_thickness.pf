!
! Regression test for the modified four digit NACA thickness distribution
!
!--------------------------------------------------------------------------------------------------
@test
subroutine regtest_modified_NACA_thickness()
    use globvar
    use pfunit_mod
    implicit none

    character(256)              :: filename
    character(:),   allocatable :: dir_path, aux_filename, command_1, command_2
    character(32)               :: argument_2, argument_3, argument_4

    integer                     :: np_section, np_span, np_thk, i_sec, i_span, i_thk
    real(kind = 8), allocatable :: sec1(:,:), sec2(:,:), thk_data1(:,:), thk_data2(:,:)
    real(kind = 8)              :: tol1 = 10E-8
    character(10)               :: sec_num
    

    ! Working directory relative path
    dir_path        = 'inputs/OpenCSM/new_inputs/NACA_thickness_with_derivative/' 

    ! Name of the main test input file
    filename        = dir_path//'3dbgbinput.2.dat'

    ! Name of the auxiliary test input file
    aux_filename    = dir_path//'spancontrolinputs.2.dat'

    ! Set command line arguments
    argument_2      = 'dev'
    argument_3      = 'quiet'
    argument_4      = ''

    
    !
    ! Run T-Blade3
    !
    call bgb3d_sub(filename, aux_filename, argument_2, argument_3, argument_4)


    !
    ! Move all output files to the working directory
    !
    command_1       = 'mv *Case6_4_Demo* *.log stagger_angles.dat '//dir_path
    call execute_command_line(command_1)


    !
    ! Number of points in the blade section and along the span
    !
    np_section      = 241
    np_span         = 21
    np_thk          = 121


    !
    ! Test all sections along the span
    !
    do i_span = 1, np_span

        ! Convert section number to a string
        write(sec_num, '(i2)') i_span


        ! Allocate 2D array to hold (x,y,z) section coordinates generated by the test
        if (allocated(sec1)) deallocate(sec1)
        allocate(sec1(3,np_section))

        ! Read section file generated by the test
        open(101, file = dir_path//'sec'//trim(adjustl(sec_num))//'.Case6_4_Demo.dat')
        do i_sec = 1, np_section
            read(101,*) sec1(1,i_sec), sec1(2,i_sec), sec1(3,i_sec)
        end do
        close(101)


        ! Allocate 2D array to hold thickness data generated by the test
        if (allocated(thk_data1)) deallocate(thk_data1)
        allocate(thk_data1(4,np_thk))

        ! Read thickness file generated by the test
        open(101, file = dir_path//'thickness_data.'//trim(adjustl(sec_num))//'.Case6_4_Demo')
        do i_thk = 1, np_thk
            read(101,*) thk_data1(1,i_thk), thk_data1(2,i_thk), thk_data1(3,i_thk), thk_data1(4,i_thk)
        end do
        close(101)


        ! Allocate 2D array to hold reference (x,y,z) section coordinates
        if (allocated(sec2)) deallocate(sec2)
        allocate(sec2(3,np_section))

        ! Read refereence section file
        open(102, file = dir_path//'regtest_files/sec'//trim(adjustl(sec_num))//'.Case6_4_Demo.dat')
        do i_sec = 1, np_section
            read(102,*) sec2(1,i_sec), sec2(2,i_sec), sec2(3,i_sec)
        end do
        close(102)

      
        ! Allocate 2D array to hold reference thickness data
        if (allocated(thk_data2)) deallocate(thk_data2)
        allocate(thk_data2(4,np_thk)) 

        ! Read reference thickness data file
        open(102, file = dir_path//'regtest_files/thickness_data.'//trim(adjustl(sec_num))//'.Case6_4_Demo')
        do i_thk = 1, np_thk
            read(102,*) thk_data2(1,i_thk), thk_data2(2,i_thk), thk_data2(3,i_thk), thk_data2(4,i_thk)
        end do
        close(102)
        

        ! Test sections 
        do i_sec = 1, np_section    
            @assertEqual(sec1(1,i_sec), sec2(1,i_sec), tol1)
            @assertEqual(sec1(2,i_sec), sec2(2,i_sec), tol1)
            @assertEqual(sec1(3,i_sec), sec2(3,i_sec), tol1)
        end do


        ! Test thickness distribution
        do i_thk = 1, np_thk
            @assertEqual(thk_data1(1,i_thk), thk_data2(1,i_thk), tol1)
            @assertEqual(thk_data1(2,i_thk), thk_data2(2,i_thk), tol1)
            @assertEqual(thk_data1(3,i_thk), thk_data2(3,i_thk), tol1)
        end do

    end do  ! do i_span = 1, np_span


    !
    ! Delete all output files in the working directory
    !
    command_2 = 'cd '//dir_path//' && ls | grep -v "3dbgbinput.2.dat\|spancontrolinputs.2.dat\|tblade_NACA_thickness.csm\|&
                &regtest_files" | xargs rm -rf'
    call execute_command_line(command_2)


end subroutine regtest_modified_NACA_thickness
!--------------------------------------------------------------------------------------------------



















