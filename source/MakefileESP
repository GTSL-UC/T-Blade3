#       Makefile for TBlade library
#
#

ifndef ESP_ROOT
$(error ESP_ROOT must be set -- Please fix the environment...)
endif

ifdef MEMCHECK
ESPFLAGS  += -fsanitize=address -fno-omit-frame-pointer -fuse-ld=gold
ESPFFLAGS += -fsanitize=address -fno-omit-frame-pointer -fuse-ld=gold
endif
ifdef UNDEFINED
ESPFLAGS  += -fsanitize=undefined -fno-omit-frame-pointer -fuse-ld=gold
ESPFFLAGS += -fsanitize=undefined -fno-omit-frame-pointer -fuse-ld=gold
endif

IDIR  = $(ESP_ROOT)/include
include $(IDIR)/$(ESP_ARCH)
LDIR  = $(ESP_ROOT)/lib
ifdef ESP_BLOC
ODIR  = $(ESP_BLOC)/obj
else
ODIR  = .
endif

VPATH = $(ODIR)

OBJS  =	$(ODIR)/globvar.o \
    $(ODIR)/file_operations.o\
    $(ODIR)/errors.o\
	$(ODIR)/spline.o \
	$(ODIR)/readinput.o \
	$(ODIR)/funcNsubs.o \
	$(ODIR)/bladegen.o \
	$(ODIR)/3dbgb.o \
    $(ODIR)/3dbgb_driver.o \
	$(ODIR)/bladestack.o \
	$(ODIR)/bspline3.o \
	$(ODIR)/lesting.o \
	$(ODIR)/cubicspline.o \
	$(ODIR)/lespline.o \
	$(ODIR)/bsplinecam.o \
	$(ODIR)/splinethick.o \
	$(ODIR)/airfoiltypes.o \
	$(ODIR)/spanwise_variation.o 

ifeq ($(EFCOMP),ifort)
FOPTX = -cpp -norecursive -save -noautomatic -module $(ODIR)
else
FOPTX =	-fdefault-real-8 -fbounds-check -fbacktrace -Wline-truncation -cpp -DFROM_ESP\
	-fno-automatic -ffree-form -ffree-line-length-none -std=legacy -J $(ODIR)
endif

all: $(LDIR)/libTBlade3.a $(LDIR)/tblade.so $(LDIR)/bladevolume.so $(LDIR)/hubwedge.so

$(LDIR)/libTBlade3.a:	$(OBJS)
	touch $(LDIR)/libTBlade3.a
	rm $(LDIR)/libTBlade3.a
	(cd $(ODIR); ar $(LOPTS) $(LDIR)/libTBlade3.a $(OBJS); $(RANLB) )

$(ODIR)/globvar.o:	globvar.f90
	$(FCOMP) -c $(FOPTS) $(FOPTX) globvar.f90            -o $(ODIR)/globvar.o
$(ODIR)/file_operations.o:	file_operations.f90
	$(FCOMP) -c $(FOPTS) $(FOPTX) file_operations.f90    -o $(ODIR)/file_operations.o
$(ODIR)/errors.o:	errors.f90
	$(FCOMP) -c $(FOPTS) $(FOPTX) errors.f90             -o $(ODIR)/errors.o
$(ODIR)/spline.o:	spline.f90
	$(FCOMP) -c $(FOPTS) $(FOPTX) spline.f90             -o $(ODIR)/spline.o
$(ODIR)/readinput.o:	readinput.f90
	$(FCOMP) -c $(FOPTS) $(FOPTX) readinput.f90          -o $(ODIR)/readinput.o
$(ODIR)/funcNsubs.o:	funcNsubs.f90
	$(FCOMP) -c $(FOPTS) $(FOPTX) funcNsubs.f90          -o $(ODIR)/funcNsubs.o
$(ODIR)/bladegen.o:	bladegen.f90
	$(FCOMP) -c $(FOPTS) $(FOPTX) bladegen.f90           -o $(ODIR)/bladegen.o
$(ODIR)/3dbgb.o:	3dbgb.f90
	$(FCOMP) -c $(FOPTS) $(FOPTX) 3dbgb.f90              -o $(ODIR)/3dbgb.o
$(ODIR)/3dbgb_driver.o:	3dbgb_driver.f90
	$(FCOMP) -c $(FOPTS) $(FOPTX) 3dbgb_driver.f90       -o $(ODIR)/3dbgb_driver.o
$(ODIR)/bladestack.o:	bladestack.f90
	$(FCOMP) -c $(FOPTS) $(FOPTX) bladestack.f90         -o $(ODIR)/bladestack.o
$(ODIR)/bspline3.o:	bspline3.f90
	$(FCOMP) -c $(FOPTS) $(FOPTX) bspline3.f90           -o $(ODIR)/bspline3.o
$(ODIR)/lesting.o:	lesting.f90
	$(FCOMP) -c $(FOPTS) $(FOPTX) lesting.f90            -o $(ODIR)/lesting.o
$(ODIR)/cubicspline.o:	cubicspline.f90
	$(FCOMP) -c $(FOPTS) $(FOPTX) cubicspline.f90        -o $(ODIR)/cubicspline.o
$(ODIR)/lespline.o:	lespline.f90
	$(FCOMP) -c $(FOPTS) $(FOPTX) lespline.f90           -o $(ODIR)/lespline.o
$(ODIR)/bsplinecam.o:	bsplinecam.f90
	$(FCOMP) -c $(FOPTS) $(FOPTX) bsplinecam.f90         -o $(ODIR)/bsplinecam.o
$(ODIR)/splinethick.o:	splinethick.f90
	$(FCOMP) -c $(FOPTS) $(FOPTX) splinethick.f90        -o $(ODIR)/splinethick.o
$(ODIR)/airfoiltypes.o:	airfoiltypes.f90
	$(FCOMP) -c $(FOPTS) $(FOPTX) airfoiltypes.f90       -o $(ODIR)/airfoiltypes.o
$(ODIR)/spanwise_variation.o:	spanwise_variation.f90
	$(FCOMP) -c $(FOPTS) $(FOPTX) spanwise_variation.f90 -o $(ODIR)/spanwise_variation.o

$(LDIR)/tblade.so:	$(ODIR)/udpTblade.o $(LDIR)/libTBlade3.a
	touch $(LDIR)/tblade.so
	rm $(LDIR)/tblade.so
	$(FCOMP) $(SOFLGS) -o $(LDIR)/tblade.so $(ODIR)/udpTblade.o -L$(LDIR) -lTBlade3 -legads

$(ODIR)/udpTblade.o:	udpTblade.c $(IDIR)/udpUtilities.c $(IDIR)/udpUtilities.h
	$(CC) -c $(COPTS) $(DEFINE) -I$(IDIR) udpTblade.c -o $(ODIR)/udpTblade.o

$(LDIR)/bladevolume.so:	$(ODIR)/udpBladeVolume.o $(LDIR)/libTBlade3.a
	touch $(LDIR)/bladevolume.so
	rm $(LDIR)/bladevolume.so
	$(FCOMP) $(SOFLGS) -o $(LDIR)/bladevolume.so $(ODIR)/udpBladeVolume.o -L$(LDIR) -lTBlade3 -legads

$(ODIR)/udpBladeVolume.o:	udpBladeVolume.c $(IDIR)/udpUtilities.c $(IDIR)/udpUtilities.h
	$(CC) -c $(COPTS) $(DEFINE) -I$(IDIR) udpBladeVolume.c -o $(ODIR)/udpBladeVolume.o

$(LDIR)/hubwedge.so:	$(ODIR)/udpHubWedge.o $(LDIR)/libTBlade3.a
	touch $(LDIR)/hubwedge.so
	rm $(LDIR)/hubwedge.so
	$(FCOMP) $(SOFLGS) -o $(LDIR)/hubwedge.so $(ODIR)/udpHubWedge.o -L$(LDIR) -lTBlade3 -legads

$(ODIR)/udpHubWedge.o:	udpHubWedge.c $(IDIR)/udpUtilities.c $(IDIR)/udpUtilities.h
	$(CC) -c $(COPTS) $(DEFINE) -I$(IDIR) udpHubWedge.c -o $(ODIR)/udpHubWedge.o

clean:
	rm -f $(OBJS) $(ODIR)/udpTblade.o $(ODIR)/udpBladeVolume.o $(ODIR)/udpHubWedge.o $(OBJS:.o=.mod)

cleanall:	clean
	rm -f $(LDIR)/libTBlade3.a $(LDIR)/tblade.so $(LDIR)/bladevolume.so $(LDIR)/hubwedge.so
